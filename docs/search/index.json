[{"content":"最初の記事投稿でサイバーセキュリティ以外の投稿になりますが、このブログの環境づくりで色々手間取ったため、まとめたいと思います。\n概要 以下のプロダクトとサービスを利用してこのブログを作成しています。それらを選んだ理由とその構築方法（メモ）を以下にまとめます。\n静的サイトジェネレータ：Hugo v0.107.0 テーマ：Hugo Theme Stack Git GitHub Pages 他のCMSを利用しない理由 以下の理由で私は、『静的サイトジェネレータ』『GitHub Pages』でブログを作成しようと思いました。 私もググって調べて比較した限りなので、本当はもっと良い方法もあったかもしれません。あくまでご参考までに。\n維持費用が安く済む 他のCMSで有名なものとして、WordPressがあると思います。これで公開ブログを作ろうとすると、LAMP（Linux、Apache、MySQL、PHP）の環境を準備する必要があります。\nこの環境のためのレンタルサーバやVPSをさくらインターネット等で準備する必要があり、維持費用がかかります。（とはいっても、スペックの低い環境であれば、毎月数百円で済むことも多いです。）\n静的サイトジェネレータとGitHub Pagesだと維持費用がかからないため、個人ブログとしては魅力的でした。（数百円でも毎月かかると結構違います）\nセキュリティ対策を考えなくて済む WordPressは、ITのスキルなしにブログ作成できるところはメリットですが、深刻なセキュリティ脆弱性が頻繁にでています。そのため、頻繁に脆弱性情報をウォッチし、脆弱性に該当する場合はアップデートするなどの対応が必要になります。\nまた他のLAMPのプロダクトについても同様です。WordPressのような動的サイトだと、セキュリティ脆弱性が生まれやすいです。 （そうしないと、準備した環境が改ざんされたり、乗っ取られたりします。実際私もVPSを借りているのですが、バックドアプログラムを仕込まれ、外部から操作されたことがありました。。）\n静的サイトジェネレータで作ったサイトだと、静的コンテンツになるためセキュリティ脆弱性のリスクは低減できています。またGitHub Pagesもアップデートの管理をGitHubに委託できるため、個人として対応することは不要になります。\nセキュリティに関するブログ発信をしていて、改ざんされると情けないので、この理由が一番大きい気がします。\n流行しているスキルを身に着けるため 上記理由だけであれば、『はてなブログ』で作る方法もあるかと思います。その方法も考えたのですが、ITスキルが身につかないと考えたため、採用を見送りました。\n『静的サイトジェネレータ』でサイトを作るためには、最低限どのような仕組みで動いているかを理解する必要があります。また、GitHub PagesもGitの初歩的な知識が必要になります。 これらの仕組みや知識を理解・習得するために、はてなブログはやめました。\n静的サイトジェネレータとは？ CLOUDFLAREのサイトを見ると『生（未加工）データとテンプレート群を基に、完全に静的なHTML Webサイトを生成するツールのことです。』と紹介されています。\nテンプレートの中に設定ファイルやデータが含まれており、それらを修正します。その後、ツールを実行（ビルド処理）することにより、静的なHTMLコンテンツを自動生成してくれます。\nこのツールはいくつか紹介されており、代表的なものに以下があります。\nNEXT.js Hugo Gatsby Jekyll なお、以下のサイトで静的サイトの人気ランキングありました。 https://jamstack.org/generators/\nGithub Starが多いものが人気があると考え、上位でかつ（私があまり知識のない）JSの知識が不要と考えられるHugoを私は選択しました。\nGitHub Pagesとは？ GitHubが提供している静的サイトのホスティングサービスです。レンタルサーバでApacheなどのWEBサービスか稼働している環境を準備することなく、WEBサイトを公開することができます。\nなお独自ドメインを利用したり、gooogleアドセンスのような広告を張ることも可能とのことです。（ただこのサイトはまだ対応していません。）\n環境構築の流れ 以下にそれぞれの流れを簡単にまとめます。つまづいたところはなるべく丁寧に説明するつもりです。\nGitをインストール 詳細に説明しているサイトは、いくつもあるのでここでは割愛します。\n私は以下のサイトをもとに自分のローカル環境（Windows 11）にインストールしました。\nhttps://www.curict.com/item/60/60bfe0e.html\nHugoをインストール こちらも私は以下のサイトを参考にインストールをしました。 https://dev-labo.com/windows/start-up-hugo/\n特段つまづかなかったのですが、以下に簡単に手順をまとめます。\nHugoのページからローカル環境にあわせたZIPファイルをダウンロード ZIPファイルを解凍 Hugoのexeファイルを配置する場所を作成し、解凍ファイルをその場所に移動 配置したファイル（exeファイル）に対して環境変数のPATHを通す コマンドプロンプトで以下のコマンドを実行し、ヘルプ一覧がでてきたら実行成功 1 hugo help サイトのドキュメントルートを作成 Apacheでいうドキュメントルートを作成します。以下のサイトを参考にしました。\nhttps://miiitomi.github.io/p/hugo/\nこちらも特段つまづかなかったのですが、以下に簡単に手順をまとめます。\nコンテンツを配置するディレクトリを作成する。今回は例として以下とする。 1 E:\\Blog ブログを入れるディレクトリ名（任意）を決める。今回は例としてMyBlogとする。 コマンドプロンプトで『1.』で作成したディレクトリに移動して、hugoでディレクトリを作成する。コマンドと出力例は以下の通り。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 E:\\Blog\u0026gt; cd E:\\Blog E:\\Blog\u0026gt; hugo new site MySite Congratulations! Your new Hugo site is created in E:\\Blog\\MySite. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. MyBlogの中に初期のデータが入っていればOK テーマを選択する Hugoの公式ホームページでテーマが公開されています。この中で自分の好みに合ったものを選ぶとよいと思います。 私はStackを選びました。\nなおこちらのサイトでは、GitHub Starsに基づいてランキングを集計して公開しているようです。 よく使われるサイトが後半の設定を変更するためにも有益だと思うので、スターが多いものも選択肢の候補になると思います。\nテーマを配置する ここで色々なサイトで色々やり方が紹介されています。この方法が本来として正しいかは別ですが、私はテーマをZIPでダウンロードして以下のフォルダに配置しました。\n1 E:\\Blog\\MySite\\themes\\ git cloneする方法を紹介しているものもありますが、あとでこのテーマの設定を一部変更します。 そうするとgitでプッシュしてGitHub PagesでDeployできなくなるため、ZIPでダウンロードする方法としました。 （このあたりは素人なのですが、テーマは別のレポジトリで管理されており、その設定を変更したことにより不整合がおきてエラーが出ると考えています。） 私は以下のエラーがでてつまづきました。その後ZIPでダウンロードしてやるやり方に変更してできるようになりました。\n1 Error : fatal: No url found for submodule path ‘themes/hugo-theme-stack\u0026#39; in .gitmodules サブモジュールのパスが登録されていないため、元のテーマがアップデートされたときに同期をとることが難しくなると思っていますが、 それはまた必要にお応じて是正していければと思っています…。\n上記ディレクトリにテーマを配置できたら、サンプルサイトを起動できるか確認します。 以下のファイルとディレクトリを、\n1 2 E:\\Blog\\MySite\\themes\\hugo-theme-stack\\exampleSite\\config.yaml E:\\Blog\\MySite\\themes\\hugo-theme-stack\\exampleSite\\content 以下のディレクトリにコピーします。（contentディレクトリは置き換えになります。）\n1 E:\\Blog\\MySite\\ また、以下の設定ファイルはコピーした設定ファイル（config.yaml)を利用したいため削除します。\n1 E:\\Blog\\MySite\\config.toml 上記が完了したら、コマンドプロンプトで以下のコマンドを実行します。出力例は以下の通りです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 E:\\Blog\\MySite\u0026gt;cd E:\\Blog\\MySite E:\\Blog\\MySite\u0026gt;hugo server -D -F Start building sites … hugo v0.105.0-0e3b42b4a9bdeb4d866210819fc6ddcf51582ffa+extended windows/amd64 BuildDate=2022-10-28T12:29:05Z VendorInfo=gohugoio WARN 2022/12/13 10:42:35 Search page not found. Create a page with layout: search. WARN 2022/12/13 10:42:35 Archives page not found. Create a page with layout: archives. WARN 2022/12/13 10:42:35 Search page not found. Create a page with layout: search. WARN 2022/12/13 10:42:35 Archives page not found. Create a page with layout: archives. | EN | ZH-CN | AR -------------------+----+-------+----- Pages | 47 | 17 | 20 Paginator pages | 1 | 0 | 0 Non-page files | 5 | 4 | 1 Static files | 0 | 0 | 0 Processed images | 24 | 13 | 3 Aliases | 23 | 7 | 9 Sitemaps | 2 | 1 | 1 Cleaned | 0 | 0 | 0 Built in 1123 ms Watching for changes in E:\\Blog\\MySite\\{archetypes,content,data,layouts,static,themes} Watching for config changes in E:\\Blog\\MySite\\config.yaml, E:\\Blog\\MySite\\themes\\hugo-theme-stack\\config.yaml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 上記でローカルのWEBサービスが立ち上がったため、出力の通りhttp://localhost:1313/にブラウザでアクセスし、サンプルサイトが閲覧できれば稼働できています。\n設定を変更する 以下のサイトを参考に設定を変更しました。 https://miiitomi.github.io/p/hugo/\nなお大きく日本語フォントに関する設定と全般の設定に分かれているため、それぞれまとめます。\n日本語フォント設定 元テーマの設定ファイルの変更が必要になります。以下のパスのファイルを開きます。\n1 E:\\Blog\\MySite\\themes\\hugo-theme-stack\\assets\\scss\\variables.scss 以下の中国語フォントの箇所を\n1 2 3 --zh-font-family: ... ～～中略～～ --base-font-family: \u0026#34;Lato\u0026#34;, var(--sys-font-family), var(--zh-font-family), sans-serif; 以下に変更して中国語フォントではなく日本語フォントになるように変更します。これで漢字が中国フォントになることを防ぐことができます。\n1 2 3 --ja-font-family: \u0026#34;游ゴシック体\u0026#34;, \u0026#34;Yu Gothic\u0026#34;, YuGothic, \u0026#34;ヒラギノ角ゴ Pro\u0026#34;, \u0026#34;Hiragino Kaku Gothic Pro\u0026#34;, \u0026#34;メイリオ\u0026#34;, \u0026#34;Meiryo\u0026#34;; ～～中略～～ --base-font-family: \u0026#34;Lato\u0026#34;, var(--sys-font-family), var(--ja-font-family), sans-serif; 全般の設定 以下のサイトを参考に設定を変更しました。詳細は別途まとめようと思いますが、引っかかる要素はなかったと思います。 https://miiitomi.github.io/p/hugo/\nなお、アバターやfaviconなどの画像は以下に格納します。imagesのディレクトリが無ければ作成します。\n1 E:\\Blog\\MySite\\static\\images 記事の作成 以下のサイトのやり方を参考に記事を作成します。 https://miiitomi.github.io/p/hugo/\n上記記事にある通り、hugo server -D -Fでローカル環境でWEBサービスを立ち上げながら、記事やコンテンツの修正をしていきます。 ここで公開できるまで内容を作りこんでいきます。\nGitHub Pagesの設定 一通り公開できるまで内容ができたら、GitHub Pagesを利用するレポジトリを作っていきます。 なおここでは、GitHubのアカウントは既に作ってあるものとします。\n最初にコンテンツを管理するレポジトリを作成します。 ここでレポジトリ名ですが、URLに指定したい文字列をレポジトリ名にする必要があります。 なお、GitHub Pagesが提供するドメインをそのまま利用する場合、以下の命名規則とする必要があります。\n1 XXXX.github.io 例えばドメインをこのサイトのようにshimizu4310.github.ioとしたい場合、作成するレポジトリは以下のように指定します。\n1 shimizu4310.github.io レポジトリ名にも.github.ioを入れるようにします。 PublicかPrivateのどちらでも公開はできるようですが、マークダウンの記述の参考として公開もできるため、私はPublicでレポジトリ設定をしています。\nレポジトリが作成できたら、ソースをdocsになるように変更します。以下のように、Settingsを選択し、Pagesを選択してブランチをdocsに変更しSaveします。 レポジトリへPush 上記まで作成できたらレポジトリへプッシュします。 プッシュする前に、ローカル環境でツールを使って静的コンテンツを作成します。コマンドプロンプトでドキュメントルートのディレクトリまで移動し、以下のコマンドでビルドすれば大丈夫です。\n1 2 E:\\Blog\\MySite\u0026gt; cd E:\\Blog\\MySite E:\\Blog\\MySite\u0026gt; hugo 上記を実行し静的ファイルが完成していれば、以下のディレクトリに静的ファイルコンテンツが作成されているはずです。\n1 E:\\Blog\\MySite\\docs なお余談ですが、上記ファイルをapache等のWebサービスのあるサーバに設置するとそのままコンテンツを表示させることができます。\nここまでできたら作成したレポジトリにプッシュします。プッシュするコンテンツは以下のパスすべてでdocsのみではありません。\n1 E:\\Blog\\MySite プッシュできたら、GitHub Pagesでコンテンツが表示できるか確認します。 以下のようにたどるとコンテンツが表示できるか確認ができます。 もしくはドメインを直接指定しても確認ができると思います。\nうまくできない場合 うまく表示ができなかったりエラーが出る場合は、なんらかビルドに失敗していると考えられます。 ローカル環境でhugo server -D -Fでうまく表示ができ、GitHub Pages上で表示できない場合、GitHub Pagesでエラーを起こしている可能性があります。 上記のように、Actionsを見るとステータスがみえるため、deployが成功しているかを確認すると原因究明につなげられると思います。 （エラーが出ている場合は、エラーで検索すると原因や対応方法がわかるかと思います。）\n長くなりましたが、私も手探りしながら構築しました。もっと良い方法などありましたらツイッター等でコメントをください！\n","date":"2022-12-31T00:00:00Z","permalink":"https://shimizu4310.github.io/p/hugo_instruction/","title":"静的サイトジェネレータとGitHub Pagesを利用したブログ作成"}]